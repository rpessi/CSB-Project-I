"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from dotenv import load_dotenv #remove flaw-2
import os #remove flaw-2
from pathlib import Path

load_dotenv() #remove flaw-2

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# NOTICE: This project does not use this key, but if you need a secret key
# and are using Github Actions for CI/CD pipeline, you can store
# these kinds of keys in Github Secrets.
SECRET_KEY = 'This_key_is_not_used'

ADMIN_PW = os.getenv("ADMIN_PW") #remove flaw-2

# FLAW-2
# ADMIN_PW is read here from .env file and is used in polls/admin.py
# to check if admin user already exists and if not, one is created.
# This value leaks to browser with DEBUG = True and poor exeption
# handling, thus enabling the user to access the admin panel at
# /admin, with guessing that username 'admin' and providing the
# password from browser. Accessing the admin panel gives access
# to possibly sensitive information and possibly also deleting
# data from database, depending on settings. By default, using
# delete from admin panel by selecting objects, delete action uses
# QuerySet.delete() and delete() in models.py is bypassed, thus
# rendering useless possible checks for delete() in models.py.
# FIX for flaw-2: In addition to modifications concerning DEBUG = True, do
# not use this way for setting the admin password. See also comments
# in file polls/admin.py. Delete lines for importing and using os and
# dotenv, including ADMIN_PW = os.getenv(ADMIN_PW).

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# FLAW-1
# This is the default value for DEBUG and as the file template clearly indicates, this should
# never be turned on in production. What this setting does is prints all sorts of information
# of the production firmware and also the values of environmental variables, including those
# that are highly secret, if an error is raised. During development, it's quite usual to
# raise errors to see how what the values of variables are, when error is raised. In production,
# better exception handling should be used and this setting should be set to False.
# FIX for flaw-1: Set DEBUG = False for production. See also comments in file polls/views.py.
# DEBUG = False

ALLOWED_HOSTS = []

# FLAW-1
# With setting DEBUG = False, the default setting
# ALLOWED_HOSTS = [] is not allowed. With DEBUG = True,
# ALLOWED_HOSTS = [] is validated against ['.localhost', '127.0.0.1', '[::1]']
# by default. Hence, ALLOWED_HOSTS = ['.localhost', '127.0.0.1']
# is used here for trying out the program locally. With
# ALLOWED_HOSTS = [] the server refuses to run. Thus,
# the given setting is just for the purpose of this excercise,
# not to be used in production. Furthermore, to make of use of
# this scurity protection, the host name is to be checked using
# get_host() instead of accessing the Host header directly
# from request.META.
# FIX for flaw-1: with DEBUG = False, use proper settings for ALLOWED_HOSTS
# ALLOWED_HOSTS = ['.localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts', #comment out when using 'accounts.apps.AccountsConfig'
    # FIX for flaw-4
    #'accounts.apps.AccountsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# FLAW-3:
# Missing settings for session cookies
# On a shared computer, if user A simply closes the browser tab instead
# of logging out, user A remains logged in and anyone using
# the same computer later can navigate to the site and will
# be logged in as user A
# The default value for SESSION_COOKIE_AGE is 1209600 (2 weeks, in seconds)

# FIX for flaw-3: Add following configurations
# SESSION_COOKIE_AGE = 120
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# Reset the 'timer' during navigation:
# SESSION_SAVE_EVERY_REQUEST = True

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# FLAW-4
# Missing logging
# FIX for flaw-4, add simple logging for failed login attempts
# See also accounts/apps.py and accounts/signals.py
# Type A09 flaw, Security Logging and Monitorin Failures. One example of this is
# not logging failed logins. A bare minimum of logging is done here to log failed
# loging attempts, printing them to console and also writing them into a file.
# The logs include the username and host address.Proper logging to be alerted
# for repeated login attemps needs far more code and configuration.

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': 'False',
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#         'file': {
#             'class': 'logging.FileHandler',
#             'filename': 'failed_logins.log',
#         },
#     },
#     'loggers': {
#         'django.security.LoginFailed': {
#             'handlers': ['console', 'file'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#     },
# }

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Helsinki'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home"

#configured for local testing, prints the email to server console
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
